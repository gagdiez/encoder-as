import { SimpleParser, BaseVisitor } from "visitor-as";
import { toString, isMethodNamed, getName } from 'visitor-as/dist/utils.js';
import { isStdlib } from "./utils.js";
function isField(node) {
    return node.kind == 54 /* NodeKind.FIELDDECLARATION */;
}
function isInstanceField(node) {
    return isField(node) && node.is(262144 /* CommonFlags.INSTANCE */);
}
export class MethodInjector extends BaseVisitor {
    encodeStmts;
    decodeStmts;
    currentClass;
    visitFieldDeclaration(node) {
        const name = toString(node.name);
        if (!node.type) {
            throw new Error(`Field ${name} is missing a type declaration  for ${toString(this.currentClass)}`);
        }
        const _type = getName(node.type);
        this.encodeStmts.push(`encoder.encode_field<${_type}>("${name}", this.${name})`);
        this.decodeStmts.push(`this.${name} = decoder.decode_field<${_type}>("${name}")`);
    }
    visitClassDeclaration(node) {
        if (isStdlib(node)) {
            return;
        }
        const fields = node.members.filter(isInstanceField);
        if (!fields) {
            return;
        }
        this.currentClass = node;
        this.encodeStmts = [];
        this.decodeStmts = [];
        super.visit(fields);
        const encodeMethod = `
    encode<__T>(encoder: __T): void {
      ${node.extendsType != null ? "super.encode<__T>(encoder);" : ""}
      ${this.encodeStmts.join(";\n\t")};
    }
    `;
        const decodeMethod = `
    decode<__T>(decoder: __T): void {
      ${node.extendsType != null ? "super.decode(decoder);" : ""}
      ${this.decodeStmts.join(";\n\t")};
    }
    `;
        if (!node.members.some(isMethodNamed("encode"))) {
            const encodeMember = SimpleParser.parseClassMember(encodeMethod, node);
            node.members.push(encodeMember);
        }
        if (!node.members.some(isMethodNamed("decode"))) {
            const decodeMember = SimpleParser.parseClassMember(decodeMethod, node);
            node.members.push(decodeMember);
        }
    }
    static visit(node) {
        (new MethodInjector()).visit(node);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWV0aG9kSW5qZWN0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvbWV0aG9kSW5qZWN0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFlBQVksRUFBRSxXQUFXLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFDdkQsT0FBTyxFQUFFLFFBQVEsRUFBRSxhQUFhLEVBQUUsT0FBTyxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDNUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUV0QyxTQUFTLE9BQU8sQ0FBQyxJQUEwQjtJQUN6QyxPQUFPLElBQUksQ0FBQyxJQUFJLHNDQUE2QixDQUFDO0FBQ2hELENBQUM7QUFFRCxTQUFTLGVBQWUsQ0FBQyxJQUEwQjtJQUNqRCxPQUFPLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsRUFBRSxtQ0FBc0IsQ0FBQztBQUN4RCxDQUFDO0FBRUQsTUFBTSxPQUFPLGNBQWUsU0FBUSxXQUFXO0lBQzdDLFdBQVcsQ0FBWTtJQUN2QixXQUFXLENBQVk7SUFDdkIsWUFBWSxDQUFvQjtJQUVoQyxxQkFBcUIsQ0FBQyxJQUFzQjtRQUMxQyxNQUFNLElBQUksR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2pDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQ2QsTUFBTSxJQUFJLEtBQUssQ0FBQyxTQUFTLElBQUksdUNBQXVDLFFBQVEsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1NBQ3BHO1FBRUQsTUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUVqQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyx3QkFBd0IsS0FBSyxNQUFNLElBQUksV0FBVyxJQUFJLEdBQUcsQ0FBQyxDQUFDO1FBRWpGLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFFBQVEsSUFBSSwyQkFBMkIsS0FBSyxNQUFNLElBQUksSUFBSSxDQUFDLENBQUM7SUFDcEYsQ0FBQztJQUVELHFCQUFxQixDQUFDLElBQXNCO1FBQzFDLElBQUksUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQUUsT0FBTztTQUFFO1FBRS9CLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQ3BELElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDWCxPQUFPO1NBQ1I7UUFDRCxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQztRQUV6QixJQUFJLENBQUMsV0FBVyxHQUFHLEVBQUUsQ0FBQztRQUN0QixJQUFJLENBQUMsV0FBVyxHQUFHLEVBQUUsQ0FBQztRQUN0QixLQUFLLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRXBCLE1BQU0sWUFBWSxHQUFHOztRQUVqQixJQUFJLENBQUMsV0FBVyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsNkJBQTZCLENBQUMsQ0FBQyxDQUFDLEVBQUU7UUFDN0QsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDOztLQUVqQyxDQUFBO1FBQ0QsTUFBTSxZQUFZLEdBQUc7O1FBRWpCLElBQUksQ0FBQyxXQUFXLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDLENBQUMsRUFBRTtRQUN4RCxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7O0tBRWpDLENBQUE7UUFDRCxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUU7WUFDL0MsTUFBTSxZQUFZLEdBQUcsWUFBWSxDQUFDLGdCQUFnQixDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsQ0FBQztZQUN2RSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztTQUNqQztRQUNELElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRTtZQUMvQyxNQUFNLFlBQVksR0FBRyxZQUFZLENBQUMsZ0JBQWdCLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxDQUFDO1lBQ3ZFLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1NBQ2pDO0lBQ0gsQ0FBQztJQUVELE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBK0I7UUFDMUMsQ0FBQyxJQUFJLGNBQWMsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3JDLENBQUM7Q0FFRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFR5cGVOb2RlLCBDbGFzc0RlY2xhcmF0aW9uLCBTb3VyY2UsIEZpZWxkRGVjbGFyYXRpb24sIE5vZGVLaW5kLCBEZWNsYXJhdGlvblN0YXRlbWVudCwgQ29tbW9uRmxhZ3MgfSBmcm9tIFwiYXNzZW1ibHlzY3JpcHQvZGlzdC9hc3NlbWJseXNjcmlwdC5qc1wiO1xyXG5pbXBvcnQgeyBTaW1wbGVQYXJzZXIsIEJhc2VWaXNpdG9yIH0gZnJvbSBcInZpc2l0b3ItYXNcIjtcclxuaW1wb3J0IHsgdG9TdHJpbmcsIGlzTWV0aG9kTmFtZWQsIGdldE5hbWUgfSBmcm9tICd2aXNpdG9yLWFzL2Rpc3QvdXRpbHMuanMnO1xyXG5pbXBvcnQgeyBpc1N0ZGxpYiB9IGZyb20gXCIuL3V0aWxzLmpzXCI7XHJcblxyXG5mdW5jdGlvbiBpc0ZpZWxkKG5vZGU6IERlY2xhcmF0aW9uU3RhdGVtZW50KTogYm9vbGVhbiB7XHJcbiAgcmV0dXJuIG5vZGUua2luZCA9PSBOb2RlS2luZC5GSUVMRERFQ0xBUkFUSU9OO1xyXG59XHJcblxyXG5mdW5jdGlvbiBpc0luc3RhbmNlRmllbGQobm9kZTogRGVjbGFyYXRpb25TdGF0ZW1lbnQpOiBib29sZWFuIHtcclxuICByZXR1cm4gaXNGaWVsZChub2RlKSAmJiBub2RlLmlzKENvbW1vbkZsYWdzLklOU1RBTkNFKTtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIE1ldGhvZEluamVjdG9yIGV4dGVuZHMgQmFzZVZpc2l0b3Ige1xyXG4gIGVuY29kZVN0bXRzITogc3RyaW5nW107XHJcbiAgZGVjb2RlU3RtdHMhOiBzdHJpbmdbXTtcclxuICBjdXJyZW50Q2xhc3MhOiBDbGFzc0RlY2xhcmF0aW9uO1xyXG5cclxuICB2aXNpdEZpZWxkRGVjbGFyYXRpb24obm9kZTogRmllbGREZWNsYXJhdGlvbik6IHZvaWQge1xyXG4gICAgY29uc3QgbmFtZSA9IHRvU3RyaW5nKG5vZGUubmFtZSk7XHJcbiAgICBpZiAoIW5vZGUudHlwZSkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEZpZWxkICR7bmFtZX0gaXMgbWlzc2luZyBhIHR5cGUgZGVjbGFyYXRpb24gIGZvciAke3RvU3RyaW5nKHRoaXMuY3VycmVudENsYXNzKX1gKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgY29uc3QgX3R5cGUgPSBnZXROYW1lKG5vZGUudHlwZSk7XHJcbiAgICBcclxuICAgIHRoaXMuZW5jb2RlU3RtdHMucHVzaChgZW5jb2Rlci5lbmNvZGVfZmllbGQ8JHtfdHlwZX0+KFwiJHtuYW1lfVwiLCB0aGlzLiR7bmFtZX0pYCk7XHJcbiAgICBcclxuICAgIHRoaXMuZGVjb2RlU3RtdHMucHVzaChgdGhpcy4ke25hbWV9ID0gZGVjb2Rlci5kZWNvZGVfZmllbGQ8JHtfdHlwZX0+KFwiJHtuYW1lfVwiKWApO1xyXG4gIH1cclxuXHJcbiAgdmlzaXRDbGFzc0RlY2xhcmF0aW9uKG5vZGU6IENsYXNzRGVjbGFyYXRpb24pOiB2b2lkIHtcclxuICAgIGlmIChpc1N0ZGxpYihub2RlKSkgeyByZXR1cm47IH1cclxuXHJcbiAgICBjb25zdCBmaWVsZHMgPSBub2RlLm1lbWJlcnMuZmlsdGVyKGlzSW5zdGFuY2VGaWVsZCk7XHJcbiAgICBpZiAoIWZpZWxkcykge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICB0aGlzLmN1cnJlbnRDbGFzcyA9IG5vZGU7XHJcblxyXG4gICAgdGhpcy5lbmNvZGVTdG10cyA9IFtdO1xyXG4gICAgdGhpcy5kZWNvZGVTdG10cyA9IFtdO1xyXG4gICAgc3VwZXIudmlzaXQoZmllbGRzKTtcclxuXHJcbiAgICBjb25zdCBlbmNvZGVNZXRob2QgPSBgXHJcbiAgICBlbmNvZGU8X19UPihlbmNvZGVyOiBfX1QpOiB2b2lkIHtcclxuICAgICAgJHtub2RlLmV4dGVuZHNUeXBlICE9IG51bGwgPyBcInN1cGVyLmVuY29kZTxfX1Q+KGVuY29kZXIpO1wiIDogXCJcIn1cclxuICAgICAgJHt0aGlzLmVuY29kZVN0bXRzLmpvaW4oXCI7XFxuXFx0XCIpfTtcclxuICAgIH1cclxuICAgIGBcclxuICAgIGNvbnN0IGRlY29kZU1ldGhvZCA9IGBcclxuICAgIGRlY29kZTxfX1Q+KGRlY29kZXI6IF9fVCk6IHZvaWQge1xyXG4gICAgICAke25vZGUuZXh0ZW5kc1R5cGUgIT0gbnVsbCA/IFwic3VwZXIuZGVjb2RlKGRlY29kZXIpO1wiIDogXCJcIn1cclxuICAgICAgJHt0aGlzLmRlY29kZVN0bXRzLmpvaW4oXCI7XFxuXFx0XCIpfTtcclxuICAgIH1cclxuICAgIGBcclxuICAgIGlmICghbm9kZS5tZW1iZXJzLnNvbWUoaXNNZXRob2ROYW1lZChcImVuY29kZVwiKSkpIHsgXHJcbiAgICAgIGNvbnN0IGVuY29kZU1lbWJlciA9IFNpbXBsZVBhcnNlci5wYXJzZUNsYXNzTWVtYmVyKGVuY29kZU1ldGhvZCwgbm9kZSk7XHJcbiAgICAgIG5vZGUubWVtYmVycy5wdXNoKGVuY29kZU1lbWJlcik7XHJcbiAgICB9XHJcbiAgICBpZiAoIW5vZGUubWVtYmVycy5zb21lKGlzTWV0aG9kTmFtZWQoXCJkZWNvZGVcIikpKSB7IFxyXG4gICAgICBjb25zdCBkZWNvZGVNZW1iZXIgPSBTaW1wbGVQYXJzZXIucGFyc2VDbGFzc01lbWJlcihkZWNvZGVNZXRob2QsIG5vZGUpO1xyXG4gICAgICBub2RlLm1lbWJlcnMucHVzaChkZWNvZGVNZW1iZXIpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc3RhdGljIHZpc2l0KG5vZGU6IENsYXNzRGVjbGFyYXRpb24gfCBTb3VyY2UpOiB2b2lkIHtcclxuICAgIChuZXcgTWV0aG9kSW5qZWN0b3IoKSkudmlzaXQobm9kZSk7XHJcbiAgfVxyXG5cclxufVxyXG4iXX0=